plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.dambae200'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'net.thauvin.erik.httpstatus:httpstatus:1.0.5'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok' // 테스트 의존성 추가
	testAnnotationProcessor 'org.projectlombok:lombok' // 테스트 의존성 추가
	testImplementation 'org.springframework.boot:spring-boot-starter-test' // JUnit5, Assertj, Hamcrest, Mockito, JSONassert, JsonPath
	implementation 'org.modelmapper:modelmapper:2.4.2'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'com.google.code.gson:gson:2.8.7'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
//	developmentOnly 'org.springframework.boot:spring-boot-devtools' // redis cache manager 관련 이슈가 있어서 사용하지 않음
	implementation 'org.springframework.boot:spring-boot-starter-data-redis' // spring boot에서 redis에 대한 의존성
	implementation 'org.redisson:redisson-spring-boot-starter:3.17.7' // redisson
	implementation group: 'org.springframework', name: 'spring-websocket', version: '5.3.18' //websocket
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: '2.7.5' // websocket
	implementation group: 'org.webjars', name: 'sockjs-client', version: '1.1.2' // sockjs
	implementation 'javax.mail:mail:1.4.7' // email



}



tasks.named('test') {
	useJUnitPlatform()
}

//[start] spring + react 통합 빌드
//def reactDir = "$projectDir/src/main/webapp/book_manager";

sourceSets{
	main{
		resources{
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

//processResources{
//	dependsOn "copyReactBuildFiles"
//}

//task installReact(type:Exec){
//	workingDir "$reactDir"
//	inputs.dir "$reactDir"
//	group = BasePlugin.BUILD_GROUP
//
//	if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
//		commandLine "npm.cmd", "audit", "fix"
//		commandLine 'npm.cmd', 'install'
//	}else{
//		commandLine "npm", "audit", "fix"
//		commandLine 'npm', 'install'
//	}
//}
//
//task buildReact(type:Exec){
//	dependsOn "installReact"
//	workingDir "$reactDir"
//	inputs.dir "$reactDir"
//	group = BasePlugin.BUILD_GROUP
//
//	if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
//		commandLine "npm.cmd", "run-script", "build"
//	}else{
//		commandLine "npm", "run-script", "build"
//	}
//}
//
//task copyReactBuildFiles(type:Copy){
//	dependsOn "buildReact"
//	from "$reactDir/build"
//	into "$projectDir/src/main/resources/static"
//}
//end of [spring + react 통합 빌드]